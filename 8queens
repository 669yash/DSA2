#include <iostream>

using namespace std;

const int MAX_N = 8;

bool isSafe(int board[MAX_N][MAX_N], int row, int col, int n) {
    // Check if there is a queen in the same column
    for (int i = 0; i < row; ++i) {
        if (board[i][col] == 1) {
            return false;
        }
    }

    // Check upper left diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check upper right diagonal
    for (int i = row, j = col; i >= 0 && j < n; --i, ++j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

void printSolution(int board[MAX_N][MAX_N], int n) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << (board[i][j] == 1 ? "Q" : ".") << " ";
        }
        cout << endl;
    }
    cout << endl;
}

bool solveQueens(int board[MAX_N][MAX_N], int n, int& row, int& col) {
    while (row < n) {
        while (col < n) {
            if (isSafe(board, row, col, n)) {
                board[row][col] = 1;
                col = 0;
                return true;
            }
            ++col;
        }

        if (board[row][col] != 1) {
            if (row == 0) {
                return false;  // No solution
            }
            --row;
            col = board[row][col] + 1;
            board[row][col - 1] = 0;
        } else {
            if (row == n - 1) {
                // Reached the last row, print the solution
                printSolution(board, n);
                col = board[row][col] + 1;
                board[row][col - 1] = 0;
                --row;
            } else {
                ++row;
            }
        }
    }
    return false;
}

int main() {
    int n = 8;  // Change this value for different board sizes
    int board[MAX_N][MAX_N] = {0};
    int row = 0, col = 0;

    while (solveQueens(board, n, row, col)) {
        // Continue searching for solutions
    }

    return 0;
}
